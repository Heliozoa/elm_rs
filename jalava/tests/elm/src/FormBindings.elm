-- GENERATED BY JALAVA


module FormBindings exposing (..)

import Json.Decode
import Json.Encode
import Dict exposing (Dict)
import Http
import File

boolToString : Bool -> String
boolToString b =
    case b of
        True ->
            "True"

        False ->
            "False"


type alias A =
    { string : String
    , s : String
    , b : Bool
    , pu8 : Int
    , pu16 : Int
    , pu32 : Int
    , pu64 : Int
    , pu128 : Int
    , pusize : Int
    , pi8 : Int
    , pi16 : Int
    , pi32 : Int
    , pi64 : Int
    , pi128 : Int
    , pisize : Int
    , nu8 : Int
    , nu16 : Int
    , nu32 : Int
    , nu64 : Int
    , nu128 : Int
    , nusize : Int
    , ni8 : Int
    , ni16 : Int
    , ni32 : Int
    , ni64 : Int
    , ni128 : Int
    , nisize : Int
    , pf32 : Float
    , pf64 : Float
    }


prepareA : A -> Http.Body
prepareA form =
    Http.multipartBody <|
        List.concat
            [ [ Http.stringPart ("string") (identity form.string) ]
            , [ Http.stringPart ("s") (identity form.s) ]
            , [ Http.stringPart ("b") (boolToString form.b) ]
            , [ Http.stringPart ("pu8") (String.fromInt form.pu8) ]
            , [ Http.stringPart ("pu16") (String.fromInt form.pu16) ]
            , [ Http.stringPart ("pu32") (String.fromInt form.pu32) ]
            , [ Http.stringPart ("pu64") (String.fromInt form.pu64) ]
            , [ Http.stringPart ("pu128") (String.fromInt form.pu128) ]
            , [ Http.stringPart ("pusize") (String.fromInt form.pusize) ]
            , [ Http.stringPart ("pi8") (String.fromInt form.pi8) ]
            , [ Http.stringPart ("pi16") (String.fromInt form.pi16) ]
            , [ Http.stringPart ("pi32") (String.fromInt form.pi32) ]
            , [ Http.stringPart ("pi64") (String.fromInt form.pi64) ]
            , [ Http.stringPart ("pi128") (String.fromInt form.pi128) ]
            , [ Http.stringPart ("pisize") (String.fromInt form.pisize) ]
            , [ Http.stringPart ("nu8") (String.fromInt form.nu8) ]
            , [ Http.stringPart ("nu16") (String.fromInt form.nu16) ]
            , [ Http.stringPart ("nu32") (String.fromInt form.nu32) ]
            , [ Http.stringPart ("nu64") (String.fromInt form.nu64) ]
            , [ Http.stringPart ("nu128") (String.fromInt form.nu128) ]
            , [ Http.stringPart ("nusize") (String.fromInt form.nusize) ]
            , [ Http.stringPart ("ni8") (String.fromInt form.ni8) ]
            , [ Http.stringPart ("ni16") (String.fromInt form.ni16) ]
            , [ Http.stringPart ("ni32") (String.fromInt form.ni32) ]
            , [ Http.stringPart ("ni64") (String.fromInt form.ni64) ]
            , [ Http.stringPart ("ni128") (String.fromInt form.ni128) ]
            , [ Http.stringPart ("nisize") (String.fromInt form.nisize) ]
            , [ Http.stringPart ("pf32") (String.fromFloat form.pf32) ]
            , [ Http.stringPart ("pf64") (String.fromFloat form.pf64) ]
            ]


type alias B =
    { s : String
    , ss : List (String)
    , sm : Dict String (List (String))
    }


prepareB : B -> Http.Body
prepareB form =
    Http.multipartBody <|
        List.concat
            [ [ Http.stringPart ("s") (identity form.s) ]
            , List.concat (List.concat (List.indexedMap (\i0 x0 -> [[ Http.stringPart ("ss[" ++ String.fromInt i0 ++ "]") (identity x0) ]]) (identity form.ss)))
            , List.concat (List.map (\( k0, v0 ) -> (List.concat (List.concat (List.indexedMap (\i1 x1 -> [[ Http.stringPart ("sm[" ++ k0 ++ "][" ++ String.fromInt i1 ++ "]") (identity x1) ]]) (identity v0))))) (Dict.toList form.sm))
            ]


type alias C =
    { b : B
    , bs : List (B)
    , bm : Dict String (List (B))
    }


prepareC : C -> Http.Body
prepareC form =
    Http.multipartBody <|
        List.concat
            [ [ Http.stringPart ("b.s") (identity form.b.s) ]
            , List.concat (List.concat (List.indexedMap (\i1 x1 -> [[ Http.stringPart ("b.ss[" ++ String.fromInt i1 ++ "]") (identity x1) ]]) (identity form.b.ss)))
            , List.concat (List.map (\( k1, v1 ) -> (List.concat (List.concat (List.indexedMap (\i2 x2 -> [[ Http.stringPart ("b.sm[" ++ k1 ++ "][" ++ String.fromInt i2 ++ "]") (identity x2) ]]) (identity v1))))) (Dict.toList form.b.sm))
            , List.concat (List.concat (List.indexedMap (\i0 x0 -> [[ Http.stringPart ("bs[" ++ String.fromInt i0 ++ "].s") (identity x0.s) ]
            , List.concat (List.concat (List.indexedMap (\i2 x2 -> [[ Http.stringPart ("bs[" ++ String.fromInt i0 ++ "].ss[" ++ String.fromInt i2 ++ "]") (identity x2) ]]) (identity x0.ss)))
            , List.concat (List.map (\( k2, v2 ) -> (List.concat (List.concat (List.indexedMap (\i3 x3 -> [[ Http.stringPart ("bs[" ++ String.fromInt i0 ++ "].sm[" ++ k2 ++ "][" ++ String.fromInt i3 ++ "]") (identity x3) ]]) (identity v2))))) (Dict.toList x0.sm))]) (identity form.bs)))
            , List.concat (List.map (\( k0, v0 ) -> (List.concat (List.concat (List.indexedMap (\i1 x1 -> [[ Http.stringPart ("bm[" ++ k0 ++ "][" ++ String.fromInt i1 ++ "].s") (identity x1.s) ]
            , List.concat (List.concat (List.indexedMap (\i3 x3 -> [[ Http.stringPart ("bm[" ++ k0 ++ "][" ++ String.fromInt i1 ++ "].ss[" ++ String.fromInt i3 ++ "]") (identity x3) ]]) (identity x1.ss)))
            , List.concat (List.map (\( k3, v3 ) -> (List.concat (List.concat (List.indexedMap (\i4 x4 -> [[ Http.stringPart ("bm[" ++ k0 ++ "][" ++ String.fromInt i1 ++ "].sm[" ++ k3 ++ "][" ++ String.fromInt i4 ++ "]") (identity x4) ]]) (identity v3))))) (Dict.toList x1.sm))]) (identity v0))))) (Dict.toList form.bm))
            ]


type alias D =
    { c : C
    }


prepareD : D -> Http.Body
prepareD form =
    Http.multipartBody <|
        List.concat
            [ [ Http.stringPart ("c.b.s") (identity form.c.b.s) ]
            , List.concat (List.concat (List.indexedMap (\i2 x2 -> [[ Http.stringPart ("c.b.ss[" ++ String.fromInt i2 ++ "]") (identity x2) ]]) (identity form.c.b.ss)))
            , List.concat (List.map (\( k2, v2 ) -> (List.concat (List.concat (List.indexedMap (\i3 x3 -> [[ Http.stringPart ("c.b.sm[" ++ k2 ++ "][" ++ String.fromInt i3 ++ "]") (identity x3) ]]) (identity v2))))) (Dict.toList form.c.b.sm))
            , List.concat (List.concat (List.indexedMap (\i1 x1 -> [[ Http.stringPart ("c.bs[" ++ String.fromInt i1 ++ "].s") (identity x1.s) ]
            , List.concat (List.concat (List.indexedMap (\i3 x3 -> [[ Http.stringPart ("c.bs[" ++ String.fromInt i1 ++ "].ss[" ++ String.fromInt i3 ++ "]") (identity x3) ]]) (identity x1.ss)))
            , List.concat (List.map (\( k3, v3 ) -> (List.concat (List.concat (List.indexedMap (\i4 x4 -> [[ Http.stringPart ("c.bs[" ++ String.fromInt i1 ++ "].sm[" ++ k3 ++ "][" ++ String.fromInt i4 ++ "]") (identity x4) ]]) (identity v3))))) (Dict.toList x1.sm))]) (identity form.c.bs)))
            , List.concat (List.map (\( k1, v1 ) -> (List.concat (List.concat (List.indexedMap (\i2 x2 -> [[ Http.stringPart ("c.bm[" ++ k1 ++ "][" ++ String.fromInt i2 ++ "].s") (identity x2.s) ]
            , List.concat (List.concat (List.indexedMap (\i4 x4 -> [[ Http.stringPart ("c.bm[" ++ k1 ++ "][" ++ String.fromInt i2 ++ "].ss[" ++ String.fromInt i4 ++ "]") (identity x4) ]]) (identity x2.ss)))
            , List.concat (List.map (\( k4, v4 ) -> (List.concat (List.concat (List.indexedMap (\i5 x5 -> [[ Http.stringPart ("c.bm[" ++ k1 ++ "][" ++ String.fromInt i2 ++ "].sm[" ++ k4 ++ "][" ++ String.fromInt i5 ++ "]") (identity x5) ]]) (identity v4))))) (Dict.toList x2.sm))]) (identity v1))))) (Dict.toList form.c.bm))
            ]


