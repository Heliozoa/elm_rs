#![doc = include_str!("../../README.md")]

mod elm;
mod json;
#[cfg(feature = "rocket")]
mod rocket;

#[cfg(feature = "rocket")]
pub use self::rocket::{ElmForm, ElmFormParts};
pub use self::{elm::Elm, json::ElmJson};

#[macro_export]
/// Writes an Elm module to the target. Assumes `elm/json`, `elm/http` and `elm/file` are installed.
///
/// # Example
/// ```
/// # #[derive(Elm, ElmJson)]
/// # struct MyStruct { s: String }
/// # #[derive(Elm, ElmForm)]
/// # struct MyForm { s: String }
/// let mut file = std::fs::File::create("MyModule.elm").unwrap();
/// export!("MyModule", &mut file, MyStruct; MyForm).unwrap();
/// ```
macro_rules! export {
    ($name: expr, $target: expr $(, $json: ty)* $(; $($form: ty),* $(,)?)?) => {
        {
            fn _export(name: &str, target: &mut impl std::io::Write) -> Result<(), std::io::Error> {
                use std::io::Write;
                use jalava::*;
                writeln!(target, "\
-- GENERATED BY JALAVA


module {} exposing (..)

import Json.Decode
import Json.Encode
import Dict exposing (Dict)
import Http
import File

boolToString : Bool -> String
boolToString b =
    case b of
        True ->
            \"True\"

        False ->
            \"False\"

", name)?;
                $(
                    if let Some(elm_definition) = <$json>::elm_definition() {
                        writeln!(target, "{}\n", elm_definition)?;
                    }
                    if let Some(encoder_definition) = <$json>::encoder_definition() {
                        writeln!(target, "{}\n", encoder_definition)?;
                    }
                    if let Some(decoder_definition) = <$json>::decoder_definition() {
                        writeln!(target, "{}\n", decoder_definition)?;
                    }
                )*
                $($(
                    if let Some(elm_definition) = <$form>::elm_definition() {
                        writeln!(target, "{}\n", elm_definition)?;
                    }
                    writeln!(target, "{}\n", <$form>::prepare_form())?;
                )*)?
                Ok(())
            }
            _export($name, $target)
        }
    };
}
